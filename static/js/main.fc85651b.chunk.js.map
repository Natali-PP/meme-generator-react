{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","MemeGenerator","props","state","topText","bottomText","randomImg","allMemeImages","handleChange","bind","handleSubmit","fetch","then","blob","json","response","memes","data","setState","e","target","name","value","this","preventDefault","randomNumber","Math","floor","random","length","randomMemeImg","url","onSubmit","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4PAUeA,MARf,WACI,OACI,4BAAQC,UAAU,kBACd,yBAAKC,IAAI,mDAAmDC,IAAI,cAAcF,UAAU,eACxF,gD,iDCuEGG,E,YA1EX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAO,CACRC,QAAS,GACTC,WAAW,GACXC,UAAW,gCACXC,cAAe,IAEnB,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,gBATJ,E,iFAYE,IAAD,OACfE,MAAM,qCACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAa,IACRC,EAASD,EAASE,KAAlBD,MACP,EAAKE,SAAU,CACXX,cAAeS,S,mCAMlBG,GAAG,IAAD,EACUA,EAAEC,OAAhBC,EADI,EACJA,KAAKC,EADD,EACCA,MACZC,KAAKL,SAAL,eACKG,EAAQC,M,mCAKJH,GACTA,EAAEK,iBACF,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKpB,MAAMI,cAAcsB,QAClEC,EAAgBP,KAAKpB,MAAMI,cAAckB,GAAcM,IAC7DR,KAAKL,SAAS,CACVZ,UAAWwB,M,+BAIf,OACI,yBAAKhC,UAAU,IACX,wBAAIA,UAAU,eAAd,yBACA,0BAAMA,UAAU,iBAAiBkC,SAAUT,KAAKb,cAC5C,2BACIuB,KAAK,OACLZ,KAAK,UACLa,YAAY,WACZZ,MAAOC,KAAKpB,MAAMC,QAClB+B,SAAUZ,KAAKf,eAGnB,2BACIyB,KAAK,OACLZ,KAAK,aACLa,YAAY,cACZZ,MAAOC,KAAKpB,MAAME,WAClB8B,SAAUZ,KAAKf,eAGnB,4BAAQV,UAAU,cAAlB,aAIJ,yBAAKA,UAAU,uBACX,yBAAKC,IAAKwB,KAAKpB,MAAMG,UAAWN,IAAI,KACpC,wBAAIF,UAAU,YAAYyB,KAAKpB,MAAMC,SACrC,wBAAIN,UAAU,eAAeyB,KAAKpB,MAAME,kB,GArEhC+B,IAAMC,WCanBC,MAVf,WACE,OACE,yBAAKxC,UAAU,cAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.fc85651b.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header(){\n    return (\n        <header className=\"flex-container\" >\n            <img src=\"https://discordemoji.com/assets/emoji/lmaodf.png\" alt=\"i wanna die\" className=\"header-img\"/>\n            <h1>Meme Generator</h1>\n        </header>)\n}\n\nexport default Header","import React from 'react'\n\nclass MemeGenerator extends React.Component{\n    constructor(props){\n        super(props)\n        this.state= {\n            topText: '',\n            bottomText:'',\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImages: []\n        }\n        this.handleChange=this.handleChange.bind(this);\n        this.handleSubmit=this.handleSubmit.bind(this)\n    }\n\n    componentDidMount(){\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(blob => blob.json())\n            .then(response => {\n                const {memes} = response.data\n                this.setState( {\n                    allMemeImages: memes\n                })\n                \n            })  \n    }\n\n    handleChange(e){\n        const {name,value} = e.target;\n        this.setState({ \n            [name] : value\n        });\n\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        const randomNumber= Math.floor(Math.random() * this.state.allMemeImages.length);\n        const randomMemeImg = this.state.allMemeImages[randomNumber].url;\n        this.setState({\n            randomImg: randomMemeImg\n        }) \n    }\n    render(){\n        return(\n            <div className=\"\">\n                <h2 className=\"center-text\">WE LIVE IN A SOCIEDAD</h2>\n                <form className=\"flex-container\" onSubmit={this.handleSubmit}>\n                    <input \n                        type=\"text\" \n                        name=\"topText\" \n                        placeholder=\"Top Text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    />\n                        \n                    <input \n                        type=\"text\" \n                        name=\"bottomText\" \n                        placeholder='Bottom Text'\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    />\n\n                    <button className=\"boton-meme\">Generate\n\n                    </button>\n                </form>\n                <div className=\"flex-container meme\">\n                    <img src={this.state.randomImg} alt=\"\"/>\n                    <h2 className=\"text-top\">{this.state.topText}</h2>\n                    <h2 className=\"text-bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n}\nexport default MemeGenerator","import React from 'react';\nimport './App.css';\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator'\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}